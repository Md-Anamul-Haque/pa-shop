{
  // Place your pa-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "handle route of (pa) Functions": {
    "scope": "javascript,typescript",
    "prefix": "pa-rs", // pa-application route handle snippets
    "body": [
      "import { sql } from '@/config/db';",
      "import { ResponseHandler } from '@/helpers/ResponseHandler';",
      "import {type Request,type Response } from '@/types/request&responce.type';",

      "export const handle${TM_DIRECTORY/.*[\\\\/]([a-zA-Z]+).*/${1:/capitalize}/}${1|GET,POST,PUT,PATCH,DELETE,HEAD|} = async (req: Request, res: Response) => {",
      "    try {",
      "        // ... handle ${1} logic start hear",
      "        const DbQueryResult =await sql`select 1+2`;",
      "\n\n\n",

      "        if ('condition') {",
      "            return ResponseHandler(res, {",
      "                resType: 'success',",
      "                status: 'OK',"
      "                message: '',",
      "                payload: '' // your can any data for responce",
      "            });",
      "        } else {",
      "            return ResponseHandler(res, {",
      "                resType: 'error',",
      "                status: 'NOT_IMPLEMENTED',"
      "                message: 'error message'  //your can any message'",
      "            });",
      "        }",
      "    } catch (error) {",
      "        return ResponseHandler(res, {",
      "            resType: 'error',",
      "            status: 'INTERNAL_SERVER_ERROR',"
      "            message: (error as any)?.message || ''  //your can any message ",
      "        });",
      "    }",
      "}"
    ]
  }
}
